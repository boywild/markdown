#Javascript操作DOM常用API总结
原文地址：http://luopq.com/2015/11/30/javascript-dom/

##类型
* **Node类型**(`ELEMENT_NODE:1` `ATTRIBUTE_NODE:2` `TEXT_NODE:3` `COMMENT_NODE:8``DOCUMENT_NODE:9` `DOCUMENT_FRAGMENT_NODE:11`)
* **节点创建型**(`createElement`  `createTextNode` `cloneNode` `createDocumentFragment`)
* **页面修改型**(`appendChild` `insertBefore` `removeChild` `replaceChild`)
* **节点查询型**(`document.getElementById` `document.getElementsByTagName``document.getElementsByName` `document.getElementsByClassName ``document.querySelector` `document.querySelectorAll`)
* **节点关系型**( )
1. 父关系型(`parentNode`)
2. 兄弟关系型(`previousSibling` `previousElementSibling` `nextSibling` `nextElementSibling`)
3. 子关系型(`childNodes` `children` `firstNode` `lastNode` `hasChildNodes`)
4. 元素属性型(`setAttribute` `getAttribute`)
5. 元素样式型(`window.getComputedStyle` `getBoundingClientRect`)

##一、Node类型
Node有一个属性nodeType表示Node的类型，它是一个整数，其数值分别表示相应的Node类型，具体如下：

1. `Node.ELEMENT_NODE:1`
2. `Node.ATTRIBUTE_NODE:2`
3. `Node.TEXT_NODE:3`
4. `Node.CDATA_SECTION_NODE:4`
5. `Node.ENTITY_REFERENCE_NODE:5`
6. `Node.ENTITY_NODE:6`
7. `Node.PROCESSING_INSTRUCTION_NODE:7`
8. `Node.COMMENT_NODE:8`
9. `Node.DOCUMENT_NODE:9`
10. `Node.DOCUMENT_TYPE_NODE:10`
11. `Node.DOCUMENT_FRAGMENT_NODE:11`
12. `Node.NOTATION_NODE:12`

假设我们要判断一个Node是不是元素，我们可以这样判断

    if(someNode.nodeType == 1){
        console.log("Node is a element");
    }

## 1.1 Element类型
`Element`提供了对元素标签名，子节点和特性的访问，我们常用`HTML`元素比如`div`，`span`，`a`等标签就是`element`中的一种。`Element`有下面几条特性：

* nodeType为1
* nodeName为元素标签名，tagName也是返回标签名
* nodeValue为null
* parentNode可能是Document或Element
* 子节点可能是Element，Text，Comment，Processing_Instruction，CDATASection或EntityReference

## 1.2 Text类型
`Text`表示文本节点，它包含的是纯文本内容，不能包含`html`代码，但可以包含转义后的`html`代码。
Text有下面的特性：

* nodeType为3
* nodeName为#text
* nodeValue为文本内容
* parentNode是一个Element
* 没有子节点

## 1.3 Attr类型
`Attr`类型表示元素的特性，相当于元素的`attributes`属性中的节点，它有下面的特性：

* nodeType值为2
* nodeName是特性的名称
* nodeValue是特性的值
* parentNode为null

## 1.4 Comment类型
`Comment`表示`HTML`文档中的注释，它有下面的几种特征：

* nodeType为8
* nodeName为#comment
* nodeValue为注释的内容
* parentNode可能是Document或Element
* 没有子节点

## 1.5 Document
`Document`表示文档，在浏览器中，`document`对象是`HTMLDocument`的一个实例，表示整个页面，它同时也是`window`对象的一个属性。
`Document`有下面的特性：

* nodeType为9
* nodeName为#document
* nodeValue为null
* parentNode为null
* 子节点可能是一个DocumentType或Element

## 1.6 DocumentFragment类型
`DocumentFragment`是所有节点中唯一一个没有对应标记的类型，它表示一种轻量级的文档，可能当作一个临时的仓库用来保存可能会添加到文档中的节点。
`DocumentFragment`有下面的特性：

* nodeType为11
* nodeName为#document-fragment
* nodeValue为null
* parentNode为null

##二、节点创建型

## 2.1 createElement
注意：`IE8`以下浏览器不支持自定义标签。

    var div = document.createElement("div");

使用`createElement`要注意：通过`createElement`创建的元素并不属于`html`文档，它只是创建出来，并未添加到html文档中，要调用`appendChild`或`insertBefore`等方法将其添加到HTML文档树中。

## 2.2 createTextNode
`createTextNode`用来创建一个文本节点，用法如下：

    var textNode = document.createTextNode("一个TextNode");

## 2.3 cloneNode
`cloneNode`是用来返回调用方法的节点的一个副本，它接收一个`bool`参数，用来表示是否复制子元素，使用如下：

    var parent = document.getElementById("parentElement"); 
    var parent2 = parent.cloneNode(true);// 传入true
    parent2.id = "parent2";
这段代码通过`cloneNode`复制了一份`parent`元素，其中`cloneNode`的参数为`true`，表示`parent`的子节点也被复制，如果传入`false`，则表示只复制了`parent`节点。
例子：

    <div id="parent">
        我是父元素的文本
        <br/>
        <span>
            我是子元素
        </span>
    </div>
    <button id="btnCopy">复制</button>
    var parent = document.getElementById("parent");
    document.getElementById("btnCopy").onclick = function(){
        var parent2 = parent.cloneNode(true);
        parent2.id = "parent2";
        document.body.appendChild(parent2);
    }
绑定`button`事件，事件内容是复制了一个`parent`，修改其`id`，然后添加到文档中。

这里有几点要注意：
1. 和`createElement`一样，`cloneNode`创建的节点只是游离有`html`文档外的节点，要调用`appendChild`方法才能添加到文档树中
2. 如果复制的元素有`id`，则其副本同样会包含该id，由于`id`具有唯一性，所以在复制节点后必须要修改其id
3. 调用接收的`bool`参数最好传入，如果不传入该参数，不同浏览器对其默认值的处理可能不同

我们还有一个需要注意的点：
如果被复制的节点绑定了事件，则副本也会跟着绑定该事件吗？这里要分情况讨论：
* 如果是通过`addEventListener`或者比如`onclick`进行绑定事件，则副本节点不会绑定该事件
* 如果是内联方式绑定比如

    <div onclick="showParent()"></div>
这样的话，副本节点同样会触发事件。

## 2.4 createDocumentFragment
`createDocumentFragment`方法用来创建一个`DocumentFragment`。在前面我们说到`DocumentFragment`表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中。
`createDocumentFragment`方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中

    <ul id="list"></ul>
    <input type="button" value="添加多项" id="btnAdd" />

    document.getElementById("btnAdd").onclick = function(){
        var list = document.getElementById("list");
        for(var i = 0;i < 100; i++){
            var li = document.createElement("li");
            li.textContent = i;
            list.appendChild(li);
        }
    }
这段代码将按钮绑定了一个事件，这个事件创建了100个li节点，然后依次将其添加HTML文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候，就是使用`createDocumentFragment`了。
`DocumentFragment`不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下：

    document.getElementById("btnAdd").onclick = function(){
        var list = document.getElementById("list"); 
        var fragment = document.createDocumentFragment();
        for(var i = 0;i < 100; i++){
          var li = document.createElement("li");
            li.textContent = i;
            fragment.appendChild(li);
        }
        list.appendChild(fragment);
    }
优化后的代码主要是创建了一个`fragment`，每次生成的li节点先添加到`fragment`，最后一次性添加到`list`

**创建型API总结**
创建型`api`主要包括`createElement`，`createTextNode`，`cloneNode`和`createDocumentFragment`四个方法，需要注意下面几点：
1. 它们创建的节点只是一个孤立的节点，要通过`appendChild`添加到文档中
2. `cloneNode`要注意如果被复制的节点是否包含子节点以及事件绑定等问题
3. 使用`createDocumentFragment`来解决添加大量节点时的性能问题

##三、页面修改型

## 3.1 appendChild
`appendChild`我们在前面已经用到多次，就是将指定的节点添加到调用该方法的节点的子元素的末尾。调用方法如下：

    parent.appendChild(child);
`child`节点将会作为`parent`节点的最后一个子节点。
`appendChild`这个方法很简单，但是还有有一点需要注意：如果被添加的节点是一个页面中存在的节点，则执行后这个节点将会添加到指定位置，其原本所在的位置将移除该节点，也就是说不会同时存在两个该节点在页面上，相当于把这个节点移动到另一个地方，如果`child`绑定了事件，被移动时，它依然绑定着该事件

    <div id="child">
        要被添加的节点
    </div>
    <br/>
    <br/>
    <br/>
    <div id="parent">
        要移动的位置
    </div>      
    <input id="btnMove" type="button" value="移动节点" />
    document.getElementById("btnMove").onclick = function(){
        var child = document.getElementById("child");
        document.getElementById("parent").appendChild(child);
    }
这段代码主要是获取页面上的`child`节点，然后添加到指定位置，可以看到原本的`child`节点被移动到`parent`中了。

## 3.2 insertBefore
`insertBefore`用来添加一个节点到一个参照节点之前，用法如下：

    parentNode.insertBefore(newNode,refNode);
`parentNode`表示新节点被添加后的父节点
`newNode`表示要添加的节点
`refNode`表示参照节点，新节点会添加到这个节点之前
例子

    <div id="parent">
        父节点
        <div id="child">                
            子元素
        </div>
    </div>
    <input type="button" id="insertNode" value="插入节点" />
    var parent = document.getElementById("parent");
    var child = document.getElementById("child");
    document.getElementById("insertNode").onclick = function(){
        var newNode = document.createElement("div");
        newNode.textContent = "新节点"
        parent.insertBefore(newNode,child);
    }
这段代码创建了一个新节点，然后添加到`child`节点之前。
和`appendChild`一样，如果插入的节点是页面上的节点，则会移动该节点到指定位置，并且保留其绑定的事件。

关于第二个参数参照节点还有几个注意的地方：
1. `refNode`是必传的，如果不传该参数会报错
2. 如果`refNode是undefined`或`null`，则`insertBefore`会将节点添加到子元素的末尾

## 3.3 removeChild
`removeChild`删除指定的子节点并返回，用法如下：

    var deletedChild = parent.removeChild(node);

`deletedChild`指向被删除节点的引用，它等于`node`，被删除的节点仍然存在于内存中，可以对其进行下一步操作。
注意：如果被删除的节点不是其子节点，则程序将会报错。我们可以通过下面的方式来确保可以删除：

    if(node.parentNode){
        node.parentNode.removeChild(node);
    }
通过节点自己获取节点的父节点，然后将自身删除。


## 3.4 replaceChild
`replaceChild`用于使用一个节点替换另一个节点，用法如下

    parent.replaceChild(newChild,oldChild);
`newChild`是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置`oldChild`是被替换的节点

**页面修改型API总结**
页面修改型`api`主要是这四个接口，要注意几个特点：
1. 不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，也就是说同一个节点不能存在于页面的多个位置
2. 节点本身绑定的事件会不会消失，会一直保留着。

##四、节点查询型
## 4.1 document.getElementById
**有几点要注意：**
1. 元素的`Id`是大小写敏感的，一定要写对元素的`id`
2. `HTML`文档中可能存在多个id相同的元素，则返回第一个元素
3. 只从文档中进行搜索元素，如果创建了一个元素并指定`id`，但并没有添加到文档中，则这个元素是不会被查找到的

## 4.2 document.getElementsByTagName
这个接口根据元素标签名获取元素，返回一个即时的`HTMLCollection`类型

    <div>div1</div>
    <div>div2</div>       
    <input type="button" value="显示数量" id="btnShowCount"/>
    <input type="button" value="新增div" id="btnAddDiv"/> 
    var divList = document.getElementsByTagName("div");
    document.getElementById("btnAddDiv").onclick = function(){
        var div = document.createElement("div");
        div.textContent ="div" + (divList.length+1);
        document.body.appendChild(div);
    }
        
    document.getElementById("btnShowCount").onclick = function(){
            alert(divList.length);
    }
这段代码中有两个按钮，一个按钮是显示`HTMLCollection`元素的个数，另一个按钮可以新增一个`div`标签到文档中。前面提到`HTMLCollcetion`元素是即时的表示该集合是随时变化的，也就是是文档中有几个`div`，它会随时进行变化，当我们新增一个`div`后，再访问`HTMLCollection`时，就会包含这个新增的`div`。

使用`document.getElementsByTagName`这个方法有几点要注意：
1. 如果要对`HTMLCollection`集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率
2. 如果没有存在指定的标签，该接口返回的不是`null`，而是一个空的`HTMLCollection`
3. “*”表示所有标签

## 4.3 document.document.getElementsByName
`getElementsByName`主要是通过指定的name属性来获取元素，它返回一个即时的`NodeList`对象

**使用这个接口主要要注意几点：**
1. 返回对象是一个即时的`NodeList`，它是随时变化的
2. 在`HTML`元素中，并不是所有元素都有`name`属性，比如`div`是没有`name`属性的，但是如果强制设置`div`的`name`属性，它也是可以被查找到的
3. 在`IE`中，如果`id`设置成某个值，然后传入`getElementsByName`的参数值和`id`值一样，则这个元素是会被找到的，所以最好不好设置同样的值给`id`和`name`

## 4.4 document.document.getElementsByClassName
这个`API`是根据元素的`class`返回一个即时的`HTMLCollection`，用法如下

    var elements = document.getElementsByClassName(names);
这个接口有下面几点要注意：
（1）返回结果是一个即时的`HTMLCollection`，会随时根据文档结构变化
（2）`IE9`以下浏览器不支持
（3）如果要获取2个以上`classname`，可传入多个`classname`，每个用空格相隔，例如

    var elements = document.getElementsByClassName("test1 test2");



## 4.5 document.querySelector
通过`css`选择器来查找元素
`document.querySelector`返回第一个匹配的元素，如果没有匹配的元素，则返回`null`。
注意，由于返回的是第一个匹配的元素，这个`api`使用的深度优先搜索来获取元素。

    <div>
        <div>
            <span class="test">第三级的span</span>  
        </div>
    </div>
    <div class="test">          
        同级的第二个div
    </div>
    <input type="button" id="btnGet" value="获取test元素" />

    document.getElementById("btnGet").addEventListener("click",function(){
        var element = document.querySelector(".test");
        alert(element.textContent);
    })
这个例子很简单，就是两个`class`都包含“test”的元素，一个在文档树的前面，但是它在第三级，另一个在文档树的后面，但它在第一级，通过`querySelector`获取元素时，它通过深度优先搜索，拿到文档树前面的第三级的元素。


## 4.6 document.querySelectorAll
通过`css`选择器来查找元素
`document.querySelectorAll`返回所有匹配的元素，且可以匹配多个选择符

    <div class="test">
        class为test
    </div>
    <div id="test">
        id为test
    </div>
    <input id="btnShow" type="button" value="显示内容" />
    document.getElementById("btnShow").addEventListener("click",function(){
        var elements = document.querySelectorAll("#test,.test");    
        for(var i = 0,length = elements.length;i<length;i++){
            alert(elements[i].textContent);
        }   
    })
这段代码通过`querySelectorAll`，使用`id`选择器和`class`选择器选择了两个元素，并依次输出其内容。
**要注意两点：**
1. `querySelectorAll`也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关
2. 返回的是一个非即时的`NodeList`，也就是说结果不会随着文档树的变化而变化
3. `querySelector`和`querySelectorAll`在ie8以下的浏览器不支持。

##五、节点关系型
## 5.1 父关系型
* parentNode
每个节点都有一个`parentNode`属性，它表示元素的父节点。`Element`的父节点可能是`Element`，`Document`或`DocumentFragment`。
* parentElement
返回元素的父元素节点，与`parentNode`的区别在于，其父节点必须是一个`Element`，如果不是，则返回null

## 5.2 兄弟关系型
* previousSibling
节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。
* previousElementSibling
返回前一个元素节点，前一个节点必须是`Element`，注意IE9以下浏览器不支持。
* nextSibling
节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。
* nextElementSibling
返回后一个元素节点，后一个节点必须是`Element`，注意IE9以下浏览器不支持。

## 5.3 子关系型
* childNodes
返回一个即时的`NodeList`，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。
* children
一个即时的`HTMLCollection`，子节点都是`Element`，`IE9`以下浏览器不支持。
* firstNode
第一个子节点
* lastNode
最后一个子节点
* hasChildNodes方法
可以用来判断是否包含子节点。

## 5.4 元素属性型
### 5.4.1 setAttribut
setAttribute：根据名称和值修改元素的特性，用法如下。

    element.setAttribute(name, value);
其中`name`是特性名，`value`是特性值。如果元素不包含该特性，则会创建该特性并赋值。
如果元素本身包含指定的特性名为属性，则可以世界访问属性进行赋值，比如下面两条代码是等价的

    element.setAttribute("id","test");
    element.id = "test";

### 5.4.2 getAttribute
`getAttribute`返回指定的特性名相应的特性值，如果不存在，则返回`null`或空字符串。用法如下：

    var value = element.getAttribute("id");

## 5.5 元素样式型
### 5.5.1 window.getComputedStyle
`window.getComputedStyle`是用来获取应用到元素后的样式，假设某个元素并未设置高度而是通过其内容将其高度撑开，这时候要获取它的高度就要用到getComputedStyle，用法如下：

    var style = window.getComputedStyle(element[, pseudoElt]);
`element`是要获取的元素，`pseudoElt`指定一个伪元素进行匹配。
返回的`style`是一个`CSSStyleDeclaration`对象。
通过`style`可以访问到元素计算后的样式


### 5.5.2 getBoundingClientRect
getBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置，用法如下：

    var clientRect = element.getBoundingClientRect();
`clientRect`是一个`DOMRec`t对象，包含`left`，`top`，`right`，`bottom`，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。除了IE9以下浏览器，还包含元素的height和width等数据




