
# 手机设备上的一些名词及概念

# 屏幕尺寸
我们通常所说的iPhone5屏幕尺寸为4英寸、iPhone6屏幕尺寸为4.7英寸，指的是显示屏对角线的长度

# 虚拟试图(visual viewport)
可以认为是设备自己的宽度，也叫视口尺寸指的是浏览器可视区域的宽度。

# 布局试图(layout viewport)
可以认为是虚拟的窗口，也可以片面的理解为苹果或者安卓手机屏幕的分辨率(注：是分辨率而非手机屏幕大小)

# 实际试图(ideal viewport)
移动设备的理想viewport

当你打开一个`960px`设计的网页时，手机会根据css中的百分比进行缩放。比如总长`960`的页面，导航条是`20%`。（实际解析出来就是`192px`）但是你不可能每个属性都是百分比吧，比如文字大小。那么我用`320px`屏幕打开，导航条就成了`64px`了，但是我的字体大小是`12px`啊，完了，本来能显示很多汉字的`（192/12）`现在只能显示`64/12`个汉字了。

`Apple`找到了一个办法：在移动版`(iOS)`的`Safari`中定义了`viewport meta`标签

①它的作用就是创建一个虚拟的窗口(`viewport`)，而且这个虚拟窗口的分辨率接近于桌面显示器，`Apple`将其定位为`980px`
②一代`iphone`下的`Safari`来说就是：在`iphone`的`320px`物理屏幕上——视觉窗口(`visual viewport`)，创建出了一个`980px`的虚拟窗口——布局窗口(`layout viewport`)，在视觉窗口(`visual viewport`)中我们可以拖动横向竖向滑动条或者放大缩小网页来达到最佳的浏览效果(类似桌面浏览器)；而布局窗口(`layout viewport`)用来配合CSS渲染布局

# 物理像素(physical pixel)
一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。
用通俗的方式来理解就是，用手机截屏，放在`pc`显示器上浏览，在`pc`上查看属性，显示该截图是多少`px`那么该手机的物理像素就是多少`px`

# 设备独立像素DIP(density independent pixel/device independent pixels)
设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。
用通俗的方式理解就是，把当前手机设备，放在`pc`显示器上做比较，该手机占`pc`显示器多少`px`，那么此设备的独立像素就是多少`px`

# 像素密度PPI(pixel per inch)
表示沿着对角线，每英寸所拥有的像素（Pixel）数目。PPI数值越高，代表显示屏能够以越高的密度显示图像，即通常所说的分辨率越高、颗粒感越弱
所以ppi能够通过公式计算出来，列如：iPhone 4s,屏幕尺寸3.5-inch，物理像素640x960


# DPI(dot per inch)

# 设备像素比(device pixel ratio )
设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：

```
设备像素比 = 物理像素 / 设备独立像素
```

在`javascript`中，可以通过`window.devicePixelRatio`获取到当前设备的`dpr`。
在`css`中，可以通过`-webkit-device-pixel-ratio`，`-webkit-min-device-pixel-ratio`和 `-webkit-max-device-pixel-ratio`进行媒体查询，对不同`dpr`的设备，做一些样式适配(这里只针对`webkit`内核的浏览器和`webview`)

```
window.devicePixelRatio = 物理像素 / DIP
```

`dip`或`dpI`(指每英寸点的个数),（`device independent pixels`，设备独立像素）与屏幕密度有关。`dip`可以用来辅助区分视网膜设备还是非视网膜设备
列 所有非视网膜屏幕的iphone在垂直的时候，宽度为320物理(物理即看不见摸不着)像素 这里的320就是设备物理像素也就是设备屏幕的分辨率，分辨率和屏幕尺寸不是同一个概念
设备独立像素也就是设备屏幕实物的尺寸

```
本文的DIPs切勿和DPI搞混了！DPI指每英寸点的个数，本文的DIP指设备独立像素。
```

#概念理解

移动设备上的浏览器认为自己必须能让所有的网站都正常显示，即使是那些不是为移动设备设计的网站。但如果以浏览器的可视区域作为`viewport`的话，因为移动设备的屏幕都不是很宽，所以那些为桌面浏览器设计的网站放到移动设备上显示时，必然会因为移动设备的`viewport`太窄，而挤作一团，甚至布局什么的都会乱掉。也许有人会问，现在不是有很多手机分辨率都非常大吗，比如`768x1024`，或者`1080x1920`这样，那这样的手机用来显示为桌面浏览器设计的网站是没问题的吧？前面我们已经说了，css中的1px并不是代表屏幕上的`1px`，分辨率越大，`css`中`1px`代表的物理像素就会越多，`devicePixelRatio`的值也越大，这很好理解，因为你分辨率增大了，但屏幕尺寸并没有变大多少，必须让`css`中的`1px`代表更多的物理像素，才能让1px的东西在屏幕上的大小与那些低分辨率的设备差不多，不然就会因为太小而看不清。所以在`1080x1920`这样的设备上，在默认情况下，也许你只要把一个div的宽度设为`300`多px（视`devicePixelRatio`的值而定），就是满屏的宽度了。回到正题上来，如果把移动设备上浏览器的可视区域设为`viewport`的话，某些网站就会因为`viewport`太窄而显示错乱，所以这些浏览器就决定默认情况下把`viewport`设为一个较宽的值，比如`980px`，这样的话即使是那些为桌面设计的网站也能在移动浏览器上正常显示了。

`ppk`把这个浏览器默认的`viewport`叫做 **layout viewport**。这个`layout viewport`的宽度可以通过`document.documentElement.clientWidth`来获取。

`layout viewport`的宽度是大于浏览器可视区域的宽度的，所以我们还需要一个`viewport`来代表 浏览器可视区域的大小，`ppk`把这个viewport叫做 **visual viewport**。
`visual viewport`的宽度可以通过`window.innerWidth`来获取，但在`Android 2`, `Oprea` `mini` 和 `UC` 8中无法正确获取

![](https://ws1.sinaimg.cn/large/aaf377eegy1fq6mlv234bj20dt0aiai5.jpg)
![](https://ws1.sinaimg.cn/large/aaf377eegy1fq6mlv3kkrj20dw0ah10r.jpg)
现在我们已经有两个`viewport`了：`layout viewport` 和 `visual viewport`。但浏览器觉得还不够，因为现在越来越多的网站都会为移动设备进行单独的设计，所以必须还要有一个能完美适配移动设备的`viewport`。所谓的完美适配指的是，首先不需要用户缩放和横向滚动条就能正常的查看网站的所有内容；第二，显示的文字的大小是合适，比如一段14px大小的文字，不会因为在一个高密度像素的屏幕里显示得太小而无法看清，理想的情况是这段14px的文字无论是在何种密度屏幕，何种分辨率下，显示出来的大小都是差不多的。当然，不只是文字，其他元素像图片什么的也是这个道理。ppk把这个`viewport`叫做 **ideal viewport**，也就是第三个`viewport`——移动设备的理想`viewport`。

`ideal viewport`并没有一个固定的尺寸，不同的设备拥有有不同的`ideal viewport`。所有的`iphone`的`ideal viewport`宽度都是`320px`，无论它的屏幕宽度是`320`还是`640`，也就是说，在`iphone`中，`css`中的`320px`就代表`iphone`屏幕的宽度

![](https://ws1.sinaimg.cn/large/aaf377eegy1fq6mluxglhj207i05wmxd.jpg)
![](https://ws1.sinaimg.cn/large/aaf377eegy1fq6mluz35bj207p05waa7.jpg)
再总结一下：ppk把移动设备上的`viewport`分为`layout viewport`  、 `visual viewport`   和 `ideal viewport`  三类，其中的`ideal viewport`是最适合移动设备的`viewport`，`ideal viewport`的宽度等于移动设备的屏幕宽度，只要在css中把某一元素的宽度设为ideal `viewport`的宽度(单位用px)，那么这个元素的宽度就是设备屏幕的宽度了，也就是宽度为100%的效果。`ideal viewport` 的意义在于，无论在何种分辨率的屏幕下，那些针对`ideal viewport` 而设计的网站，不需要用户手动缩放，也不需要出现横向滚动条，都可以完美的呈现给用户

```
 visual viewport宽度 = ideal viewport宽度  / 当前缩放值
 当前缩放值 = ideal viewport宽度  / visual viewport宽度
```

#利用meta标签对viewport进行控制

移动设备默认的`viewport`是`layout viewport`，也就是那个比屏幕要宽的`viewport`，但在进行移动设备网站的开发时，我们需要的是`ideal viewport`。那么怎么才能得到`ideal viewport`呢？这就该轮到meta标签出场了。
我们在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我们的head标签中：


```
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
```

该`meta`标签的作用是让当前`viewport`的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让`viewport`的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认`viewport`，也就是说会出现横向滚动条
这个`name`为`viewport`的meta标签到底有哪些东西呢，又都有什么作用呢？

`meta viewport` 标签首先是由苹果公司在其`safari`浏览器中引入的，目的就是解决移动设备的`viewport`问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。
在苹果的规范中，`meta viewport` 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：

* `width`   设置`layout viewport`  的宽度，为一个正整数，或字符串"width-device"
* `initial-scale`   设置页面的初始缩放值，为一个数字，可以带小数
* `minimum-scale`   允许用户的最小缩放值，为一个数字，可以带小数
* `maximum-scale`   允许用户的最大缩放值，为一个数字，可以带小数
* `height`  设置`layout viewport`  的高度，这个属性对我们并不重要，很少使用
* `user-scalable`   是否允许用户进行缩放，值为"no"或"yes", no 代表不允许，yes代表允许

这些属性可以同时使用，也可以单独使用或混合使用，多个属性同时使用时用逗号隔开就行了。
此外，在安卓中还支持  `target-densitydpi`  这个私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素

```
target-densitydpi  值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个
```

特别说明的是，当 `target-densitydpi=device-dpi` 时， `css`中的`1px`会等于物理像素中的1px。
因为这个属性只有安卓支持，并且安卓已经决定要废弃`target-densitydpi`  这个属性了，所以这个属性我们要避免进行使用 。

#把当前的viewport宽度设置为 ideal viewport 的宽度

要得到`ideal viewport`就必须把默认的`layout viewport`的宽度设为移动设备的屏幕宽度。因为`meta viewport`中的width能控制`layout viewport`的宽度，所以我们只需要把width设为`width-device`这个特殊的值就行了。

```
<meta name="viewport" content="width=device-width">
```

可以看到通过`width=device-width`，所有浏览器都能把当前的viewport宽度变成`ideal viewport`的宽度，但要注意的是，在`iphone`和`ipad`上，无论是竖屏还是横屏，宽度都是竖屏时`ideal viewport`的宽度

这句代码也能达到和前一句代码一样的效果，也可以把当前的的viewport变为 `ideal viewport`。

```
<meta name="viewport" content="initial-scale=1">
```

那为什么会有 `width=device-width` 的效果呢？
要想清楚这件事情，首先你得弄明白这个缩放是相对于什么来缩放的，因为这里的缩放值是1，也就是没缩放，但却达到了 `ideal viewport` 的效果，所以，那答案就只有一个了，缩放是相对于 ideal viewport来进行缩放的，当对`ideal viewport`进行100%的缩放，也就是缩放值为1的时候，就得到了 ideal viewport

#关于meta viewport的更多知识
1.关于缩放以及`initial-scale`的默认值
首先我们先来讨论一下缩放的问题，前面已经提到过，缩放是相对于`ideal viewport`来缩放的，缩放值越大，当前`viewport`的宽度就会越小，反之亦然。例如在`iphone`中，`ideal viewport`的宽度是`320px`，如果我们设置 `initial-scale=2` ，此时`viewport`的宽度会变为只有`160px`了，这也好理解，放大了一倍嘛，就是原来`1px`的东西变成`2px`了，但是`1px`变为`2px`并不是把原来的`320px`变为`640px`了，而是在实际宽度不变的情况下，`1px`变得跟原来的`2px`的长度一样了，所以放大`2`倍后原来需要`320px`才能填满的宽度现在只需要`160px`就做到了。因此，我们可以得出一个公式：

```
visual viewport宽度 = ideal viewport宽度  / 当前缩放值
当前缩放值 = ideal viewport宽度  / visual viewport宽度
```
`visual viewport`的宽度指的是浏览器可视区域的宽度。

大多数浏览器都符合这个理论，但是安卓上的原生浏览器以及IE有些问题。安卓自带的webkit浏览器只有在 `initial-scale = 1` 以及没有设置width属性时才是表现正常的，也就相当于这理论在它身上基本没用；而IE则根本不甩initial-scale这个属性，无论你给他设置什么，`initial-scale`表现出来的效果永远是1。

好了，现在再来说下`initial-scale`的默认值问题，就是不写这个属性的时候，它的默认值会是多少呢？很显然不会是1，因为当 `initial-scale = 1` 时，当前的`layout viewport`宽度会被设为 `ideal viewport`的宽度，但前面说了，各浏览器默认的 `layout viewport`宽度一般都是980啊，1024啊，800啊等等这些个值，没有一开始就是 `ideal viewport`的宽度的，所以 `initial-scale`的默认值肯定不是`1`。安卓设备上的`initial-scale`默认值好像没有方法能够得到，或者就是干脆它就没有默认值，一定要你显示的写出来这个东西才会起作用，我们不管它了，这里我们重点说一下`iphone`和`ipad`上的`initial-scale`默认值。

根据测试，我们可以在`iphone`和`ipad`上得到一个结论，就是无论你给`layout viewpor`设置的宽度是多少，而又没有指定初始的缩放值的话，那么iphone和ipad会自动计算`initial-scale`这个值，以保证当前`layout viewport`的宽度在缩放后就是浏览器可视区域的宽度，也就是说不会出现横向滚动条。比如说，在iphone上，我们不设置任何的`viewport meta`标签，此时`layout viewport`的宽度为`980px`，但我们可以看到浏览器并没有出现横向滚动条，浏览器默认的把页面缩小了。根据上面的公式，`当前缩放值 = ideal viewport宽度  / visual viewport宽度`，我们可以得出：
`当前缩放值 = 320 / 980`
也就是当前的`initial-scale`默认值应该是 `0.33`这样子。当你指定了`initial-scale`的值后，这个默认值就不起作用了。

总之记住这个结论就行了：在iphone和ipad上，无论你给viewport设的宽的是多少，如果没有指定默认的缩放值，则iphone和ipad会自动计算这个缩放值，以达到当前页面不会出现横向滚动条(或者说viewport的宽度就是屏幕的宽度)的目的

2.动态改变meta viewport标签
第一种方法
可以使用document.write来动态输出meta viewport标签，例如：

```
document.write('<meta name="viewport" content="width=device-width,initial-scale=1">')
```

第二种方法

```js
<meta id="testViewport" name="viewport" content="width = 380">
<script>
var mvp = document.getElementById('testViewport');
mvp.setAttribute('content','width=480');
</script>
```

##参考文章：

[移动端高清多屏适配方案](http://frontenddev.org/link/mobile-high-definition-screen-adaptation-scheme.html#heading-1-0)

[移动前端开发之viewport的深入理解](ttp://www.cnblogs.com/2050/p/3877280.html)

