[TOC]
##Array类型

###一、检测数据
`instanceof()`

```js
	if(value instanceof Array){
		//对数组执行某些操作
	}
```
instanceof操作符的问题在于，假定只有一个全局执行换。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的Array构造函数；
为解决这个问题ECMAScrip5新增了`Array.isArray()`

```js
	if(Array.isArray(value)){
		//对数组执行某些操作
	}
```
###二、转换方法
**所有对象都具有`toLocaleString()` `toString()`和`valueOf()`方法,调用数组的`toString()`方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串，而调用`valueOf()`返回的还是数组**
1、 `toLocaleString()`方法经常也会返回与`toString()`和`valueOf()`方法相同的值，**但也不总是如此**，当调用数组的`toLocaleString()`方法时，它会创建一个数组值以逗号分隔的字符串。与前两个方法唯一的不同之处在于，这一次为了取得每一项的值，调用的是每一项的`toLocaleString()`方法，而不是`toString()`方法。看下例

```js
	var person1={
		toLocalString:function(){
			return 'nn';
		},
		toString:function(){
			return 'cc';
		}
	}
	var person2={
		toLocalString:function(){
			return 'gg';
		},
		toString:function(){
			return 'tt';
		}
	}
	var people=[person1,person2];
	alert(people);//cc,tt
	alert(people.toString());//cc,tt
	alert(people.toLocalString());//nn,gg
```
2、 `join()`
用指定的分隔符将数组分割成字符串

```js
	var colors=['red','yellow','blue','green'];
	alert(colors.join(','));//red,yellow,blue,green
	alert(colors.join('||'));//red||yellow||blue||green
```
###三、栈方法
`push()` `pop()`
**栈**LIFO(Last-In-First-Out)**后进先出**，也就是最新的添加项最早被溢出。而栈中项的插入和溢出，只发生在一个位置--栈的顶部。固提供两个方法`push()` `pop()`
`push()`将数据插入到数组末尾
`pop()`将数据从数组末尾删除
###四、队列方法
`unshift()` `shift()`
**队列**FIFO(First-In-First-Out)**先进先出**，队列是在列表的末端添加，从列表的前端溢出
`unshift()`将数据插入到数组头部
`shift()`将数据从数组头部删除
###五、重新排序法
`reverse()` `sort()`
1、`reverse()`方法会反转数组项的顺序

```js
	var value=[1,2,3,4,5];
	value.reverse();
	alert(value);//[5,4,3,2,1]
```
2、`sort()`方法会调用每个数组想的`toString()`转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，`sort()`方法比较的也是字符串

```js
	var value=[0,1,5,10,15];
	value.sort();
	alert(value);//[0,1,10,15,5]
```
即使上述列子中值的排序没有问题，但`sort()`方法也会根据测试字符串的结果改变原来顺序。因为数值5虽然小于10，但在进行字符串比较时，'10'位于'5'的前面，于是数组的顺序就被修改了。这种方案不是最佳方法，所以**`sort()`方法可以接受一个比较函数做为参数**，以便我们制定哪个值位于哪个值的前面

**比较函数接受两个参数，如果第一个参数应该位于第二个参数之前则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个参数后面则返回一个正数**

```js
	//升序排列比较方法
	function compare(value1,value2){
		if(value1<value2){
			return -1
		}else if(value1>value2){
			return 1;
		}else{
			return 0;
		}
	}
```
这个比较函数适用于大多数数据类型，只要将其作为参数传给`sort()`方法即可

```js
	var value=[0,1,5,10,15];
	value.sort(compare);
	alert(value);//[0,1,5,10,15]
```
如果需要降序排列，只要交换比较函数的返回值即可。

```js
	//降序排列比较方法
	function compare(value1,value2){
		if(value1<value2){
			return 1
		}else if(value1>value2){
			return -1;
		}else{
			return 0;
		}
	}
```
**比较函数的返回值，简单点来说就是<kbd>-1</kbd>不需要调换位置，<kbd>1</kbd>需要调换位置 <kbd>0</kbd>相等不做任何改变**
比较函数有一个更简单的方法

```js
	//降序排列比较方法
	function compare(value1,value2){
		return value2-value1;
	}
	//升序排列比较方法
	function compare(value1,value2){
		return value1-value2;
	}
```
###六、操作方法
1、`concat()` 该方法可以基于当前数组中的所有项创建一个新数组。具体来说，这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给`concat()` 方法传递参数的情况下，它只是复制当前数组并返回副本。如果传递给`concat()`方法的是一个或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。如果传递的值不是数组，这些值就会被简单的添加到结果数组的末尾

```js
	var colors=['red','green','blue'];
	var colors2=colors.concat('yellow',['black','brown']);
	alert(colors);//['red','green','blue']
	alert(colors2);//['red','green','blue','yellow','black','brown']
```

2、`slice()`该方法可以基于当前数组中的一个或多个项创建一个新数组。该方法**接收一个或两个参数**，即要返回项的**起始和结束位置**，该方法返回起始位置和结束位置之间的项，但**不包括结束位置项**

```js
	var colors=['red','green','blue','yellow','black','brown'];
	var colors2=colors.slice(1);
	var colors3=colors.slice(1,4);
	alert(colors2);//['green','blue','yellow','black','brown']
	alert(colors3);//['green','blue','yellow']
```
**注：**如果`slice()`方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。例如，一个包含5箱的数组上调用`slice(-2,-1)`，与调用`slice(3,4)`结果相同。如果结束位置小于起始位置，则返回空数组

2、`splice()`该方法具有<kbd>删除</kbd>、<kbd>插入</kbd>、<kbd>替换</kbd>三个功能

* **删除**
可以删除任意数量的项，只需指定2个参数：要删除的第一项的位置和要删除的项数。
例如：`splice(0,2)`，会删除数组中的前两项
* **插入**
可以向指定位置插入任意数量的项，只需提供3个参数：起始位置、要删除的项数和要插入的项。如果要插入多个项，可以再传入第四个、第五个以至任意多个项。
例如：`splice(2,0,'red','green')`会从当前数组的位置2开始插入字符串red和green
* **替换**
可以向指定位置插入任意数量向的项，起同时删除任意数量的项，只需指定3个参数：其实位置、要删除的位置的项目和要插入的任意数量的项。插入的项目必须和删除的项数相等。
例如：`splice(2,1,'red','green')`会删除当前数组位置的2的项，然后再从位置2开始插入字符串red和green
**注意**`splice`始终都会返回一个数组，该数组中包含从原始数组中删除的项(如果没有删除数组则返回一个空数组)

```js
/*删除*/
var colors=['red','green','blue'];
var removed=colors.splice(0,1);//删除第一项
alert(colors);//[green','blue']
alert(removed);//[red'] 返回的数组中只包含一项

/*插入1*/
var colors=['red','green','blue'];
var removed=colors.splice(1,0,'pink','black');//从位置1处插入2项
alert(colors);//['red','green','blue','pink','black']
alert(removed);//因为没有删除任何项，所以返回一个空数组

/*插入2*/
var colors=['red','green','blue'];
var removed=colors.splice(1,1,'pink','black');//从位置1处删除1项插入2项
alert(colors);//['red','blue','pink','black']
alert(removed);//['green']

```

###七、位置方法
ECMAScript5位数组实例添加了两个位置方法：`indexOf()`和`lastIndexOf()`。这两个方法都接收两个参数：要查找的项和查找起点位置的索引(可选)。其中`indexOf()`方法从数组的开头开始向后查找，`lastIndexOf()`方法则从数组的末尾开始向前查找.
这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1
###八、迭代方法

| 方法      | 说明                                                                     |
| -         |                                                                          |
| every()   | 对数组中的每一项运行给定的函数，如果该函数对每一项都返回true，则返回true |
| filter()  | 对数组中的每一项运行给定的函数，返回该函数会返回true的项组成的数组       |
| forEach() | 对数组中的每一项运行给定的函数，这个方法没有返回值                       |
| map()     | 对数组中的每一项运行给定的函数，返回每次函数调用的结果组成的数组         |
| some()    | 对数组中的每一项运行给定的函数，如果该函数对任一项返回true，则返回true   |
以上方法都不会修改数组中包含的值
这些方法中，最相似的是every和some，他们都用于查询数组中的项是否满足某个条件。对every()来说，传入的函数必须对每一项都返回true，这个方法才返回true，否则返回false。而some()方法则只要传入的函数对数组中的某一项返回true，都会返回true

```js
var numbers=[];
```

###九、归并方法