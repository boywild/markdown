#指令
##标题栏
    <ion-header-bar></ion-header-bar>
属性：
1. `align-title`
设置标题文字的对齐方式。允许值：left | right | center，分别对应左对齐、 右对齐和居中对齐。
2. `no-tap-scroll`
当点击标题时，是否将内容区域自动滚动到最开始。允许值：true | false，默认为false。

##页脚栏
    <ion-footer-bar></ion-footer-bar>   

##header/footer
样式及内容 

##内容区
    <ion-content></ion-content>
属性：
1. `overflow-scroll`
使用系统内置的滚动条true|false
2. `scroll`
禁止滚动 用于百度地图 或者谷歌地图显示true|false

##滚动框
    <ion-scroll></ion-scroll>
1. `direction` 
内容可以滚动的方向。允许值：x|y|xy。默认为 y
2. `zooming` 
是否支持`pinch-to-zoom`(捏拉缩放)。允许值：true|false

##下拉更新数据
    <ion-refresher></ion-refresher> 
属性
1. `on-refresh`
当用户向下拉动足够的距离并松开时，执行此表达式
2. `on-pulling`
当用户开始向下拉动时，执行此表达式
3. `pulling-text`
当用户向下拉动时，显示此文本
4. `pulling-icon`
当用户向下拉动时，显示此图标
5. `refreshing-text`
当用户向下拉动并松开后，显示的等待文字
6. `refreshing-icon`
当用户向下拉动并松开后，显示的等待图标。`ionic`推荐使用`spinner` 代替这个属性
7. `disable-pulling-rotation`
禁止下拉图标旋转动画
8. `spinner`
和`refreshing-icon`的作用一样，但`spinner`是基于`SVG`的动画

注意在刷新完毕后，应当使用作用域的`$broadcast()`方法通知框架：

    $scope.$broadcast('scroll.refreshComplete');

##上拉更新数据
    <ion-infinite-scroll></ion-infinite-scroll> 
属性：
1. `icon`
可选。载入时显示的图标。默认是`ion-load-d`。`ionic`推荐使用`spinner`代替`icon`属性
2. `distance`
可选。距底部距离百分比。当距离底部超过此数值时，执行`on-infinite`。默认为1%
3. `on-infinite`
必须。当滚动到底部时执行此表达式
4. `spinner`
可选。载入时的`spinner`。默认是`ionSpinner`
5. `immediate-check`
可选。是否在载入时立即检查滚动框范围

##脚本接口
    $ionicScrollDelegate
可以使用服务`$ionicScrollDelegate`，通过脚本控制滚动容器（`ion-scroll`或`ion-content`）。 `$ionicScrollDelegate`服务提供的常用方法如下：

1. `resize()`
重新计算容器尺寸。当父元素大小变化时，应当调用此方法
2. `scrollTop([shouldAnimate])`
滚动到内容顶部。shouldAnimate参数为true|false，表示是否使用动画展示滚动过程
3. `scrollBottom([shouldAnimate])`
滚动到内容底部。shouldAnimate参数为true|false，表示是否使用动画展示滚动过程
4. `scrollTo(left,top[shouldAnimate])`
滚动到指定位置。left和top分别表示要滚动到的x坐标和y坐标
5. `scrollBy(left,top[shouldAnimate])`
滚动指定偏移量。left和top分别表示要滚动的x偏移量和y偏移量
6. `getScrollPosition()`
读取当前视图位置。返回值为一个`JSON`对象，具有`left`和`top`属性，分别表示`x`和`y`坐标

读取当前视图位置。返回值为一个`JSON`对象，具有`left`和`top`属性，分别表示`x`和`y`坐标

```js
angular.module("myAPP", ["ionic"]).controller("firstCtrl", ["$scope", "$ionicScrollDelegate", function($scope, $ionicScollDelegate) {
    $scope.items = [];
    for (var i = 0; i < 100; i++) $scope.items.push(["item ", i + 1].join(""));
    $scope.gotop = function() {
        $ionicScollDelegate.scrollTop(true);
    }
    $scope.gobottom = function() {
        $ionicScollDelegate.scrollBottom(true);
    }
}]);
```

#路由

##路由管理介绍
使用
```html
<a ui-sref="xxx"></a>
<div ui-view></div>
```

```js
var app=angular.module('xxx',['ionic'])
.config(function($stateProvider){
    $stateProvider.state('name',{
        url:'',
        templateUrl:'',
        controller:'',
        param:{}
        })
    }).controller('xxx',['$scope','$state',function($scope,$state){
            $state.go('xx')
        }]);

```

##Ionic中内联模板介绍

    <script type="text/ng-template" id="class.html">
        this is content
    </script>

##导航视图
    <ion-nav-view></ion-nav-view>===<div ui-view></div>

##模板视图
    <ion-view></ion-view>
属性：
1. `view-title`
视图标题文字
2. `cache-view`
是否对这个模板视图进行缓存允许值为：true|false，默认为true
3. `hide-back-button`
是否隐藏导航栏中的返回按钮。当模板被载入导航视图时，如果之前有其他的模板，那么在导航栏`ion-nav-bar`上默认会自动 显示返回按钮（使用指令`ion-nav-back-button`定义）。点击该按钮将返回前一个模板。 `hide-back-butto`n的允许值为：true|false ，默认为false 注意：必须在导航栏中显式地声明返回按钮，否则即使将`hide-back-button`属性设为`false`，这个按钮也不会出现
4. `hide-nav-bar`
允许值为：true|false ,默认为false

##导航栏 
    <ion-nav-bar></ion-nav-bar>   
`ion-nav-bar`和`ion-view`配合使用
属性:
1. `align-title`
标题对齐方式允许值为：left|right|center。默认为center，居中对齐
2. `no-tap-scroll`
允许值为：true|false。默认为true，这意味着如果视图中的内容下拉很长，那么在任何时刻 点击导航栏都可以立刻回到内容的开头部分。

##回退按钮
    <ion-nav-back-button></ion-nav-back-button>
`ion-nav-back-button`是`ion-nav-bar`中的返回按钮

##视图特定按钮
    <ion-nav-buttons></ion-nav-buttons>
`ion-nav-buttons`是`ion-view`中的返回按钮
属性：
1. `side `
在导航条的那一侧放置按钮。允许值：primary|secondary|left|right
`primary`和`secondary`是平台相关的。比如在`iOS`上，`primary`被映射到左边，而`secondary` 被映射到最右边，但是在`Android`上，`primary`和`secondary`都在最右侧。 `left`和`right`则明确地声明是在左侧还是右侧，与平台无关。

##定制标题内容
定制标题内容`ion-nav-title`在`ion-view`中使用

```html
<ion-nav-view></ion-nav-view>
<ion-nav-bar>
    <ion-nav-back-button></ion-nav-back-button>
</ion-nav-bar>    
<ion-view>
    <ion-nav-title></ion-nav-title>    
    <ion-nav-buttons></ion-nav-buttons>
</ion-view>  
```

```html
    <ion-nav-bar align-title="center" class="bar-positive">
        <ion-nav-back-button></ion-nav-back-button>
    </ion-nav-bar>
    <script type="text/ng-template" id="map.html">
        <ion-view view-title="chentian">
            <ion-content>
                <ion-list>
                    <ion-item ui-sref="music">gogogog</ion-item>
                </ion-list>
            </ion-content>
        </ion-view>
        <ion-footer-bar class="bar-dark">
            <h1 class="title">底部</h1>
        </ion-footer-bar>
    </script>
    <script type="text/ng-template" id="music.html">
        <ion-view view-title="yangli">
            <ion-content>
                <ion-item ui-sref="map">gogogog</ion-item>
            </ion-content>
        </ion-view>

        <ion-footer-bar class="bar-energized">
            <h1 class="title">底部</h1>
        </ion-footer-bar>
    </script>
    <ion-nav-view></ion-nav-view>   
```

##定制视图切换方式 
    <any ui-sref=".." nav-transition="..">...</any>
目前支持的转场方式有三种：
1. `android` android模拟
2. `ios` ios模拟
3. `none` 取消转场动画

## 定制视图切换方向 
    <any ui-sref=".." nav-direction="..">...</any>
目前支持的选项有：
1. `forward` 新视图从右向左进入
2. `back` 新视图从左向右进入
3. `enter`
4. `exit`
5. `swap`

## 导航栏脚本接口 
**$ionicNavBarDelegate **
1. `align([direction])` 标题对齐方式
参数direction是可选的，允许值为：left | right | center，缺省值为center
2. `showBackButton([show])` 是否显示回退按钮
参数show是可选的，允许值为：true | false，缺省值为true
3. `showBar(show)` 是否显示导航栏
参数show的允许值为：true | false
4. `title(title)` 设置导航栏标题
参数title为HTML字符串

## 访问历史 : 
**$ionicHistory**
1. `viewHistory()` 返回视图访问历史数据
2. `currentView()` 返回当前视图对象
3. `currentHistoryId()` 返回历史ID
4. `currentTitle([val])` 设置或读取当前视图的标题
5. `backView()` 返回历史栈中前一个视图对象
6. `backTitle()` 返回历史栈中前一个视图的标题
7. `forwardView()` 返回历史栈中的下一个视图对象
8. `currentStateName()` 返回当前所处状态名
9. `goBack()` 切换到历史栈中前一个视图
10. `clearHistory()` 请空历史栈
11. 除了当前的视图记录，clearHistory()将清空应用的全部访问历史

#ion-tab
##ion-tabs 常用设置
使用方法：
```html
<ion-tabs>
<ion-tab title="xxx">...</ion-tab> <ion-tab title=" xxx ">...</ion-tab> ...
 </ion-tabs>
```

注意:
1. 不要把 ion-tabs 指令放在 ion-content 之内
2. ion-tab 的内容应当放入 ion-view 指令内，否则 ionic 在计算布局时可能出错
3. AngularJS 编译后，ion-tabs 元素将被应用.tabs 样式，因此我们可以使用 相关的样式调整 ion-tabs 的外观

###声明条带风格
    tabs-striped 带条纹风格
    tabs-standard 声明条带风格
###声明位置
    tabs-icon-top icon在文字上面
    tabs-icon-bottom icon在文字下面
    tabs-top tab在页面顶部
    tabs-bottom tab在页面底部
###ion-tabs下面的ion-tab标题文字、图标和徽章显示隐藏
    title 标题文字
    标题文字是必须的。该属性值将作为选项页的标题文字。

    icon 标题图标
    使用 icon 属性是可选的，该属性值将用来在标题文字旁边添加一个指定的图标。 这个属性的值将被作为 icon-on 和 icon-off 的默认值

    icon-on 被选中状态的标题图标
    如果一个选项页被选中，ion-tabs 将使用 icon-on 属性的值绘制图标。如果 icon-on 没有设置，那么 ion-tabs 就使用 icon 属性的值绘制图标

    icon-off 未选中状态的标题图标
    如果一个选项页没有被选中，ion-tabs 将使用 icon-off 属性的值绘制图标。如果 icon-off 没有设置，那 么 ion-tabs 就使用 icon 属性的值绘制图标

    badge 标题徽章
    ion-tabs 使用 badge 属性的值在标题文字旁边添加一个圆形的文字标识，通常用来 显示数字。这个属性 是可选的，可以是一个具体的值，也可以是当前作用域上的 一个变量

    badge-style 标题徽章样式
    使用 badge-style 属性设置徽章的样式， 比如配色方案:barge-{color}

    hiden 隐藏
    hidden 属性是当前作用域上的表达式。 当其值为 true 时，选项页将不可见

    disabled 禁止
    disabled 属性是当前作用域上的表达式。当值为 true 时，选项页将不响应 用户的点击

##ion-tabs 事件 和 $ionicTabsDelegate
###ion-tab 事件
1. `on-select` 选中事件
可选。选项页从未选中状态切换到选中状态时执行此表达式
2. `on-deselect` 未选中事件
可选。选项页从选中状态切换到未选中状态时执行此表达式
3. `ng-click` 点击事件
可选。选项页被点击时执行此表达式。如果这个属性被设置，那么`ion-tabs`将不会 自动切换选项页，调 用者需要手动调用`$ionicTabsDelegate`的`select()`方法进行 选项页切换

###ionicTabsDelegate
使用$ionicTabsDelegate服务，我们可以在脚本中控制选项卡对象`select(index)`选中指定的选项页
`index`参数从`0`开始，第一个选项页的`index`为`0`，第二个为`1`，依次类推。
`selectedIndex()` 返回当前选中选项页的索引号

##ion-tabs 路由详解
###触发状态迁移的几种方式(通俗的讲就是页面跳转的几种方式)
1. 调用$state.go() 方法，这是一个高级的便利方法;
2. 点击包含 ui-sref 指令的链接 <a ui-sref="state1">Go State 1</a> 3. 导航到与状态相关联的 url。

###通过 href 方式页面切换需要指定 url

###ionic 中结合 tab 状态嵌套的几种方式 状态可以相互嵌套。有三个嵌套的方法:
1.使用“点标记法”，例如:.state('contacts.list', {})
2.使用 parent 属性，指定一个父状态的名称字符串，例如:parent: 'contacts'
3.使用 parent 属性，指定一个父状态对象，例如:parent: contacts(contacts 是一个状态对象)

###基于对象的状态
如果你不喜欢使用基于字符串的状态，您还可以使用基于对象的状态。name 属性将在状态对象内部设 置，在所有的子状态对象中设置 parent 属性为父状态对象，像下面这样:



###ionic 路由结合 tap 实现页面切换
1. 在 ionic tab 中定义 ion-nav-view 并且加上 name 属性
```html
<ion-nav-view name="news-list"></ion-nav-view>
```

2. 在`ionic $stateProvider.state`中定义view并对应`ion-nav-view`中的`name`属性


###ionic states抽象状态
abstract一个抽象的状态可以有子状态但不能显式激活，它将被隐性激活当其子状态被激活时。下面是两个最常用的抽象状态的示例:
1. 为所有子状态预提供一个基 url
2. 在父状态中设置 template 属性，子状态对应的模板将插入到父状态模板中的 ui-view(s)中

多重路由视图

#侧边栏
```html
<ion-side-menus> 
    <!-- 中间内容 --> 
    <ion-side-menu-content ng-controller="ContentController"> </ion-side-menu-content> 
    <!-- 左侧菜单 --> 
    <ion-side-menu side="left"> </ion-side-menu> 
    <!-- 右侧菜单 --> 
    <ion-side-menu side="right"> </ion-side-menu> 
</ion-side-menus>
```
##侧边栏菜单
    <ion-side-menus></ion-side-menus>
##侧边栏打开关闭 切换指令
    <!--切换左侧栏显示状态--> <any menu-toggle="left"></any> 
    <!--切换右侧栏显示状态--> <any menu-toggle="right"></any>
menu-close指令用来给元素增加关闭侧栏内容的功能 

    <any menu-close=""></any>
与menu-toggle指令不同，menu-close不需要指定要关闭的侧栏是哪一边，它 直接将当前打开的侧栏关闭

##主区域容器
    <ion-side-menu-content></ion-side-menu-content>
1. drag-content
是否允许拖动内容打开侧栏菜单
默认为true 允许值：true|false。当设置为false时，将禁止通过拖动内容打开侧栏菜单
2. edge-drag-threshold
是否启用边距检测
默认为false。允许值：number | true | false

##侧边栏区域容器
    <ion-side-menu></ion-side-menu>
1. side
位于内容区的左边或右边
side属性是必须的。允许值：left | right。默认值为left
2. width
侧边栏的宽度
width属性是可选的，表示以像素为单位的侧栏菜单宽度。默认为275px
3. is-enabled
is-enabled属性是可选的，声明该侧边栏是否可用，允许值为：true | false ，默认为true。 当侧边栏不可用时，拖拽内容或使用切换按钮都无法打开侧栏菜单
4. expose-aside-when
侧边栏自动显示条件表达式
默认情况下，侧边栏是隐藏的，需要用户向左或向右拖动内容，或者通过一个切换按钮来打开。 但是在有些场景下（比如，横放的平板）屏幕宽度足够大，这时，自动地显示侧边栏内容会更 合理。 expose-aside-when属性就是处理这种情况的，和CSS3的@meida类似，expose-aside-when需要 一个CSS表达式，例如：expose-aside-when="(min-width:500px)"，这意味着当屏幕宽度大于 500px时将自动显示侧栏菜单

##脚本中控制侧边栏菜单接口 
    $ionicSideMenuDelegate

1. `toggleLeft([isOpen])`
是否打开左侧栏菜单
参数isOpen是可选的，默认为true ，表示打开左侧栏菜单
2. `toggleRight([isOpen])`
是否打开右侧栏菜单
参数isOpen是可选的，默认为true ，表示打开右侧栏菜单
3. `getOpenRatio()`
侧栏菜单打开的宽度占其总宽度比例
例如，一个100px宽的侧栏菜单，如果打开50px，那么其比例为50%，getOpenRatio()将 返回0.5
4. `isOpen()`
当前侧栏菜单是否打开
不管是左侧栏菜单，还是右侧栏菜单，只要处于打开状态，isOpen()都返回 true
5. `isOpenLeft()`
左侧栏菜单是否打开
当左侧栏菜单处于打开状态时，isOpenLeft()返回true
6. `isOpenRight()`
右侧栏菜单是否打开
当右侧栏菜单处于打开状态时，isOpenRight()返回true
7. `canDragContent([canDrag])`
是否允许拖拽内容以打开侧栏菜单
canDrag参数是可选的，如果canDrag为true，表示允许通过拖拽内容打开侧栏菜单
8. `edgeDragThreshold(value)`
设置边框距离阈值
当参数value为false或0时，意味着在内容区域任何位置进行拖拽都可以打开侧栏菜单。 如果参数value为一个数值，意味着只有当拖拽发生的位置距边框不大于此数值时，才能打开 侧栏菜单。 参数value为true等同于将value设置为25。

##ion-tap结合 ion-side-menus一起使用

```html
<ion-side-menus>
    <ion-side-menu-content drag-content="true">
        <ion-tabs class="tabs-icon-top tabs-positive">
            <!-- Dashboard Tab -->
            <ion-tab title="tab1" icon-off="ion-ios-pulse" icon-on="ion-ios-pulse-strong" href="#/tab/tab1">
                <ion-nav-view name="tab1"></ion-nav-view>
            </ion-tab>
            <!-- Chats Tab -->
            <ion-tab title="tab2" icon-off="ion-ios-chatboxes-outline" icon-on="ion-ios-chatboxes" href="#/tab/tab2">
                <ion-nav-view name="tab2"></ion-nav-view>
            </ion-tab>
            <!-- Account Tab -->
            <ion-tab title="tab3" icon-off="ion-ios-gear-outline" icon-on="ion-ios-gear" href="#/tab/tab3">
                <ion-nav-view name="tab3"></ion-nav-view>
            </ion-tab>
        </ion-tabs>
    </ion-side-menu-content>
    <ion-side-menu side="left"></ion-side-menu>
    <ion-side-menu side="right"></ion-side-menu>
</ion-side-menus>
```
